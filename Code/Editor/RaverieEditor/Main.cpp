// MIT Licensed (see LICENSE.md).
#include "Precompiled.hpp"

using namespace Zero;

static GameOrEditorStartup* startup = nullptr;

extern "C" {
void __wasm_call_ctors();

void ZeroExportNamed(ExportInitialize)() {
  __wasm_call_ctors();
  startup = new GameOrEditorStartup();
}

void ZeroExportNamed(ExportRunIteration)() {
  startup->RunIteration();
}
}


/*
static void InitializeOnce() {
  for (;;) {
    StartupPhase::Enum phase = startup->RunIteration();

    // Once we reach the engine update phase, we can stop initialization
    if (phase == StartupPhase::EngineUpdate) {
      break;
    }
  }
}

void __wasm_call_ctors();
void __wasm_call_dtors();
//void __wasi_proc_exit(int);
int __main_void();

// This function's export name `wizer.initialize` is specially
// recognized by Wizer. It is the direct entry point for pre-init.
__attribute__((export_name("wizer.initialize"))) void __wizer_initialize() {
    // `__wasm_call_ctors()` is generated by `wasm-ld` and invokes all
    // of the global constructors. It is safe (and in fact necessary)
    // to manually invoke it here because `wizer.initialize` is the
    // direct entry point, and no libc startup (crt1.o or equivalent)
    // is executed before this code does.
    __wasm_call_ctors();

    // Perform our own initialization
    InitializeOnce();
}

// This function replaces `_start` (the WASI-specified entry point) in
// the pre-initialized Wasm module.
__attribute__((export_name("wizer.resume"))) void __wizer_resume() {
    // `__main_void()` is defined by the WASI SDK toolchain due to
    // special semantics in C/C++ for the `main()` function, i.e., ito
    // can either take argc/argv or not. It collects arguments using
    // the appropriate WASI calls and then invokes the user program's
    // `main()`. This may change in the future; when it does, we will
    // coordinate with the WASI-SDK toolchain to implement this entry
    // point in an alternate way.
    int r = __main_void();
    // Because we are replacing `_start()`, we need to manually invoke
    // destructors as well.
    __wasm_call_dtors();
    // If main returned non-zero code, call `__wasi_proc_exit`.
    if (r != 0) {
      __wasi_proc_exit(r);
    }
}
*/

int main(int argc, char* argv[])
{

  CommandLineToStringArray(gCommandLineArguments, argv, argc);
  return 0;
}

